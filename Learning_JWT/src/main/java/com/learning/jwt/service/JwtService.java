package com.learning.jwt.service;

import java.security.Key;
import java.util.Collection;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.function.Function;

import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Service;

import io.jsonwebtoken.Claims;
import io.jsonwebtoken.Jwts;
import io.jsonwebtoken.SignatureAlgorithm;
import io.jsonwebtoken.io.Decoder;
import io.jsonwebtoken.io.Decoders;
import io.jsonwebtoken.security.Keys;


@Service
public class JwtService {

	//private static final String SECRET = "de67952c6306aeb9bd2a2bc23e807c0802e4f385b2cd84e0ba1b49ba788c7ab1";  generated by online tool
	private static final String SECRET = "2845e13a06f2b70b85242f8f8d47ba716c15f8881d3589596ea0d4652fa6be42"; // generated by MySelf
	
	public String generateToken(UserDetails user) {
		return Jwts.builder()
				.setSubject(user.getUsername())
				.claim("authorities",populateAuthorities(user.getAuthorities()))
				.setIssuedAt(new Date(System.currentTimeMillis()))
				.setExpiration(new Date(System.currentTimeMillis() + 3 * 60 * 1000))
				.signWith(getSigninKey(),SignatureAlgorithm.HS256)
				.compact();
	}



	private Key getSigninKey() {

		byte[] keyByte = Decoders.BASE64.decode(SECRET);
		
		return Keys.hmacShaKeyFor(keyByte);
	}
	
	
	private Object populateAuthorities(Collection<? extends GrantedAuthority> authorities) {
		Set<String> authiritiesSet = new HashSet<>();
		for(GrantedAuthority authority : authorities) {
			
			authiritiesSet.add(authority.getAuthority());
			
		}
		System.out.println(authiritiesSet.toString());
		return String.join(",", authiritiesSet);
	}
	
	
	private Claims extractionAllClaims(String token) {
		
		return Jwts
				.parserBuilder()
				.setSigningKey(getSigninKey())
				.build()
				.parseClaimsJws(token)
				.getBody();
	}



	public  String extractUsername(String token) {
		System.out.println("extractUsername 1");
		return extractClaim(token,Claims::getSubject);
	}
	
	public <T> T extractClaim(String token, Function<Claims, T> claimResolver) {
		
		System.out.println("extractClaim  "+token);
		System.out.println("claimResolver  "+claimResolver);
		final Claims claims = extractionAllClaims(token);
		System.out.println("claims "+claims);
		return claimResolver.apply(claims);
		
	}

	
	public boolean isTokenValid(String token, UserDetails details) {
		System.out.println("isTokenValid 3");
		final String username = extractUsername(token);
		return username.equals(details.getUsername());
	}


	
	
	
	
	
	
}
